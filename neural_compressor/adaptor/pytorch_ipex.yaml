#
# Copyright (c) 2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
-
  version:
    name: '1.12'

  cpu:
    bf16: []
    fp32: ['*'] # '*' means all op types
    int8: &1_12_capabilities {
      'static': &cap_1_12_s8 {
              'Conv2d': &cap_s8_1_12_Conv2d {
              'weight': {
                          'dtype': ['int8'],
                          'scheme': ['sym'],
                          'granularity': ['per_channel'],
                          'algorithm': ['minmax']
                          },
              'activation': {
                          'dtype': ['uint8'],
                          'scheme': ['asym', 'sym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax', 'kl']
                          },
                      },
            'Conv1d': *cap_s8_1_12_Conv2d,
            'Conv3d': *cap_s8_1_12_Conv2d,
            'Linear': *cap_s8_1_12_Conv2d,
            'default': {
              'weight': {
                          'dtype': ['int8'],
                          'scheme': ['sym'],
                          'granularity': ['per_channel'],
                          'algorithm': ['minmax']
                          },
              'activation': {
                          'dtype': ['uint8'],
                          'scheme': ['asym', 'sym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax', 'kl']
                          }
                      },
            },
      'dynamic': {},
      'quant_aware': {}
    }
    uint8: *cap_1_12_s8

  xpu:
    bf16: []
    fp32: ['*'] # '*' means all op types
    int8: &1_12_capabilities_xpu {
      'static': &cap_1_12_s8_xpu {
              'Conv2d': &cap_s8_1_12_Conv2d_xpu {
              'weight': {
                          'dtype': ['int8'],
                          'scheme': ['sym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax']
                          },
              'activation': {
                          'dtype': ['uint8'],
                          'scheme': ['asym', 'sym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax']
                          },
                      },
            'Conv1d': *cap_s8_1_12_Conv2d_xpu,
            'Conv3d': *cap_s8_1_12_Conv2d_xpu,
            'Linear': *cap_s8_1_12_Conv2d_xpu,
            'default': {
              'weight': {
                          'dtype': ['int8'],
                          'scheme': ['sym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax']
                          },
              'activation': {
                          'dtype': ['uint8'],
                          'scheme': ['asym'],
                          'granularity': ['per_tensor'],
                          'algorithm': ['minmax']
                          }
                      },
            },
      'dynamic': {},
      'quant_aware': {}
    }
    uint8: *cap_1_12_s8_xpu
-
  version:
    name: '1.10'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &1_10_capabilities {
    'static': &cap_1_10_s8 {
          'Conv2d': &cap_s8_1_10_Conv2d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel','per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'Conv1d': *cap_s8_1_10_Conv2d,
          'Conv3d': *cap_s8_1_10_Conv2d,
          'Linear': *cap_s8_1_10_Conv2d,
          'default': &cap_s8_1_10_default {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym', 'sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          },
    'dynamic': {},
    'quant_aware': {}
  }
  uint8: *cap_1_10_s8


-
  version:
    name: 'default'

  bf16: []
  fp32: ['*'] # '*' means all op types
  int8: &default_capabilities {
    'static': &cap_default_s8 {
          'conv2d': &cap_s8_default_Conv2d {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        },
                    },
          'conv1d': *cap_s8_default_Conv2d,
          'conv3d': *cap_s8_default_Conv2d,
          'linear': *cap_s8_default_Conv2d,
          'default': {
            'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['sym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          },
    'dynamic': {},
    'quant_aware':{}
  }
  uint8: *cap_default_s8
